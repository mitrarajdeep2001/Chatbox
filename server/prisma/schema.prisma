generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(cuid())
  name       String
  email      String   @unique
  profilePic String?
  status     String?  @default("Hey there, I'm available")
  isOnline   Boolean  @default(true)
  lastSeenAt DateTime @default(now())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  chats        Chat[]    @relation("UserChats")
  messages     Message[] @relation("MessageCreatedBy") // Link messages created by the user
  readMessages Message[] @relation("MessageReadBy") // Link messages read by the user
  contacts     Contact[] @relation("ContactsCreatedBy") // Contacts created by the user

  Contact Contact[]

  UserChatStatus UserChatStatus[]
}

model Chat {
  id               String  @id @default(cuid())
  isGroup          Boolean
  groupName        String?
  groupDescription String?
  groupProfilePic  String?
  createdBy        String
  members          User[]  @relation("UserChats")

  messages      Message[] @relation("ChatMessages") // Link messages to the chat
  lastMessageId String? // Foreign key for the last message
  lastMessage   Message?  @relation("LastMessageInChat", fields: [lastMessageId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  UserChatStatus UserChatStatus[]
}

model Message {
  id        String  @id @default(cuid())
  chatId    String // Foreign key to the Chat table
  createdBy String // User ID of the message creator
  readBy    User[]  @relation("MessageReadBy") // Users who have read the message
  text      String?
  image     String?
  audio     String?
  video     String?
  gif       String?

  chat    Chat @relation("ChatMessages", fields: [chatId], references: [id]) // Relationship with Chat
  creator User @relation("MessageCreatedBy", fields: [createdBy], references: [id]) // Relationship with User

  lastMessageInChat Chat[] @relation("LastMessageInChat")

  status String? @default("sent") // Message status: sent, delivered, read

  repliedToId String? // ID of the message being replied to
  repliedTo   Message?  @relation("MessageReplies", fields: [repliedToId], references: [id]) // Self-referential relation for replies
  replies     Message[] @relation("MessageReplies") // Messages that reply to this message

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Contact {
  id          String @id @default(cuid())
  name        String
  email       String @unique
  userId      String // Foreign key to the User table for the contact owner
  createdById String // Foreign key to the User table for the user who created the contact

  user      User @relation(fields: [userId], references: [id]) // The contact's associated user
  createdBy User @relation("ContactsCreatedBy", fields: [createdById], references: [id]) // The user who created the contact

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserChatStatus {
  id          String   @id @default(cuid())
  userId      String // Foreign key to User
  chatId      String // Foreign key to Chat
  unseenCount Int      @default(0) // Number of unseen messages for this user in this chat
  lastReadAt  DateTime @default(now()) // Timestamp of the last read message for the user

  user User @relation(fields: [userId], references: [id])
  chat Chat @relation(fields: [chatId], references: [id])

  @@unique([userId, chatId]) // Ensures each user has only one status record per chat
}
